// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupList.proto

package com.bht.pim.proto.groups;

/**
 * Protobuf service {@code com.bht.pim.proto.groups.GroupListService}
 */
public abstract class GroupListService
        implements com.google.protobuf.Service {
    protected GroupListService() {
    }

    public static com.google.protobuf.Service newReflectiveService(
            final Interface impl) {
        return new GroupListService() {
            @Override
            public void getGroupList(
                    com.google.protobuf.RpcController controller,
                    com.google.protobuf.Empty request,
                    com.google.protobuf.RpcCallback<GroupList> done) {
                impl.getGroupList(controller, request, done);
            }

        };
    }

    public static com.google.protobuf.BlockingService
    newReflectiveBlockingService(final BlockingInterface impl) {
        return new com.google.protobuf.BlockingService() {
            @Override
            public final com.google.protobuf.Descriptors.ServiceDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }

            @Override
            public final com.google.protobuf.Message callBlockingMethod(
                    com.google.protobuf.Descriptors.MethodDescriptor method,
                    com.google.protobuf.RpcController controller,
                    com.google.protobuf.Message request)
                    throws com.google.protobuf.ServiceException {
                if (method.getService() != getDescriptor()) {
                    throw new IllegalArgumentException(
                            "Service.callBlockingMethod() given method descriptor for " +
                                    "wrong service type.");
                }
                switch (method.getIndex()) {
                    case 0:
                        return impl.getGroupList(controller, (com.google.protobuf.Empty) request);
                    default:
                        throw new AssertionError("Can't get here.");
                }
            }

            @Override
            public final com.google.protobuf.Message
            getRequestPrototype(
                    com.google.protobuf.Descriptors.MethodDescriptor method) {
                if (method.getService() != getDescriptor()) {
                    throw new IllegalArgumentException(
                            "Service.getRequestPrototype() given method " +
                                    "descriptor for wrong service type.");
                }
                switch (method.getIndex()) {
                    case 0:
                        return com.google.protobuf.Empty.getDefaultInstance();
                    default:
                        throw new AssertionError("Can't get here.");
                }
            }

            @Override
            public final com.google.protobuf.Message
            getResponsePrototype(
                    com.google.protobuf.Descriptors.MethodDescriptor method) {
                if (method.getService() != getDescriptor()) {
                    throw new IllegalArgumentException(
                            "Service.getResponsePrototype() given method " +
                                    "descriptor for wrong service type.");
                }
                switch (method.getIndex()) {
                    case 0:
                        return GroupList.getDefaultInstance();
                    default:
                        throw new AssertionError("Can't get here.");
                }
            }

        };
    }

    public static final com.google.protobuf.Descriptors.ServiceDescriptor
    getDescriptor() {
        return GroupListOuterClass.getDescriptor().getServices().get(0);
    }

    public static Stub newStub(
            com.google.protobuf.RpcChannel channel) {
        return new Stub(channel);
    }

    public static BlockingInterface newBlockingStub(
            com.google.protobuf.BlockingRpcChannel channel) {
        return new BlockingStub(channel);
    }

    /**
     * <code>rpc getGroupList(.google.protobuf.Empty) returns (.com.bht.pim.proto.groups.GroupList);</code>
     */
    public abstract void getGroupList(
            com.google.protobuf.RpcController controller,
            com.google.protobuf.Empty request,
            com.google.protobuf.RpcCallback<GroupList> done);

    @Override
    public final com.google.protobuf.Descriptors.ServiceDescriptor
    getDescriptorForType() {
        return getDescriptor();
    }

    @Override
    public final void callMethod(
            com.google.protobuf.Descriptors.MethodDescriptor method,
            com.google.protobuf.RpcController controller,
            com.google.protobuf.Message request,
            com.google.protobuf.RpcCallback<
                    com.google.protobuf.Message> done) {
        if (method.getService() != getDescriptor()) {
            throw new IllegalArgumentException(
                    "Service.callMethod() given method descriptor for wrong " +
                            "service type.");
        }
        switch (method.getIndex()) {
            case 0:
                getGroupList(controller, (com.google.protobuf.Empty) request,
                        com.google.protobuf.RpcUtil.<GroupList>specializeCallback(
                                done));
                return;
            default:
                throw new AssertionError("Can't get here.");
        }
    }

    @Override
    public final com.google.protobuf.Message
    getRequestPrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
            throw new IllegalArgumentException(
                    "Service.getRequestPrototype() given method " +
                            "descriptor for wrong service type.");
        }
        switch (method.getIndex()) {
            case 0:
                return com.google.protobuf.Empty.getDefaultInstance();
            default:
                throw new AssertionError("Can't get here.");
        }
    }

    @Override
    public final com.google.protobuf.Message
    getResponsePrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
            throw new IllegalArgumentException(
                    "Service.getResponsePrototype() given method " +
                            "descriptor for wrong service type.");
        }
        switch (method.getIndex()) {
            case 0:
                return GroupList.getDefaultInstance();
            default:
                throw new AssertionError("Can't get here.");
        }
    }

    public interface Interface {
        /**
         * <code>rpc getGroupList(.google.protobuf.Empty) returns (.com.bht.pim.proto.groups.GroupList);</code>
         */
        public abstract void getGroupList(
                com.google.protobuf.RpcController controller,
                com.google.protobuf.Empty request,
                com.google.protobuf.RpcCallback<GroupList> done);

    }

    public interface BlockingInterface {
        public GroupList getGroupList(
                com.google.protobuf.RpcController controller,
                com.google.protobuf.Empty request)
                throws com.google.protobuf.ServiceException;
    }

    public static final class Stub extends GroupListService implements Interface {
        private final com.google.protobuf.RpcChannel channel;

        private Stub(com.google.protobuf.RpcChannel channel) {
            this.channel = channel;
        }

        public com.google.protobuf.RpcChannel getChannel() {
            return channel;
        }

        @Override
        public void getGroupList(
                com.google.protobuf.RpcController controller,
                com.google.protobuf.Empty request,
                com.google.protobuf.RpcCallback<GroupList> done) {
            channel.callMethod(
                    getDescriptor().getMethods().get(0),
                    controller,
                    request,
                    GroupList.getDefaultInstance(),
                    com.google.protobuf.RpcUtil.generalizeCallback(
                            done,
                            GroupList.class,
                            GroupList.getDefaultInstance()));
        }
    }

    private static final class BlockingStub implements BlockingInterface {
        private final com.google.protobuf.BlockingRpcChannel channel;

        private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
            this.channel = channel;
        }

        @Override
        public GroupList getGroupList(
                com.google.protobuf.RpcController controller,
                com.google.protobuf.Empty request)
                throws com.google.protobuf.ServiceException {
            return (GroupList) channel.callBlockingMethod(
                    getDescriptor().getMethods().get(0),
                    controller,
                    request,
                    GroupList.getDefaultInstance());
        }

    }

    // @@protoc_insertion_point(class_scope:com.bht.pim.proto.groups.GroupListService)
}

