@author BHT

3 files always go together in JavaFX
    + Java Class
    + FXML
    + CSS

Sample package when create a FX project contains
    + Main.java. This is the main class for starting the sample application.
    + sample.fxml. This is the FXML file for defining the user interface.
    + Controller.java. controller class intended to handle user interactions with the UI.

Create JavaFX - Maven Project
    + Create JavaFX Project
    + Choose Project then Add Framework Support
    + Choose Maven then Finish
    + Configure pom.xml as usual
    + Remind: resources files put under src/main/resources


It will be called whenever user interact with the UI
    + click a myButton --> onClick
    + ...

@Override
public void handle(ActionEvent event) {

    if (event.getSource().equals(myButton)) {
        logger.info("Button say Hello World is clicked !");
    }
}

USING BUILT-IN LAYOUT PANE OF JAVA FX

    + BorderPane    : nodes are arranged in 5 regions: top, left, center, right, bottom

    + HBox          : nodes are arranged in a single row    --> Horizontal
    + VBox          : nodes are arranged in a single column --> Vertical

    + StackPane     : nodes overlapped the others as which comes finally will appear on top
    + GridPane      : nodes are arranged in a flexible grid of rows and columns

    + AnchorPane    : enable to anchor nodes to the top, bottom, left, right, or center of the pane
                      As the window is resized,
                      the nodes maintain their position relative to their anchor point

    + TilePane      : as the same as FlowPane,
                      but places all of the nodes in a grid in which each cell, or tile, is the same size

    + FlowPane      : nodes can flow (1)-vertically (in columns) or (2)-horizontally (in rows)
                      for eg. we have 8 nodes and arrange in 2 columns with 4 rows
                         (1-vertical)                    (2-horizontal)
                          1 5                             1 2
                          2 6                             3 4
                          3 7                             5 6
                          4 8                             7 8


Scene (n) --> Scenario (n)

* Params hints for calling each function is enabled by default

Common Shortcut Key when coding:

    Ctrl + Q            : quick view documentation
    Ctrl + P            : parameters information
    Ctrl + Shift + I    : quick definition