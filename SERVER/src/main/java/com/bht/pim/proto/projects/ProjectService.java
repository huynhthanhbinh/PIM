// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProjectInfo.proto

package com.bht.pim.proto.projects;

/**
 * Protobuf service {@code com.bht.pim.proto.projects.ProjectService}
 */
public abstract class ProjectService
        implements com.google.protobuf.Service {
    protected ProjectService() {
    }

    public static com.google.protobuf.Service newReflectiveService(
            final Interface impl) {
        return new ProjectService() {
            @Override
            public void getProjectById(
                    com.google.protobuf.RpcController controller,
                    ProjectId request,
                    com.google.protobuf.RpcCallback<ProjectInfo> done) {
                impl.getProjectById(controller, request, done);
            }

            @Override
            public void addNewProject(
                    com.google.protobuf.RpcController controller,
                    ProjectInfo request,
                    com.google.protobuf.RpcCallback<Success> done) {
                impl.addNewProject(controller, request, done);
            }

            @Override
            public void editProject(
                    com.google.protobuf.RpcController controller,
                    ProjectInfo request,
                    com.google.protobuf.RpcCallback<Success> done) {
                impl.editProject(controller, request, done);
            }

            @Override
            public void deleteProject(
                    com.google.protobuf.RpcController controller,
                    ProjectId request,
                    com.google.protobuf.RpcCallback<Success> done) {
                impl.deleteProject(controller, request, done);
            }

        };
    }

    public static com.google.protobuf.BlockingService
    newReflectiveBlockingService(final BlockingInterface impl) {
        return new com.google.protobuf.BlockingService() {
            public final com.google.protobuf.Descriptors.ServiceDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }

            public final com.google.protobuf.Message callBlockingMethod(
                    com.google.protobuf.Descriptors.MethodDescriptor method,
                    com.google.protobuf.RpcController controller,
                    com.google.protobuf.Message request)
                    throws com.google.protobuf.ServiceException {
                if (method.getService() != getDescriptor()) {
                    throw new IllegalArgumentException(
                            "Service.callBlockingMethod() given method descriptor for " +
                                    "wrong service type.");
                }
                switch (method.getIndex()) {
                    case 0:
                        return impl.getProjectById(controller, (ProjectId) request);
                    case 1:
                        return impl.addNewProject(controller, (ProjectInfo) request);
                    case 2:
                        return impl.editProject(controller, (ProjectInfo) request);
                    case 3:
                        return impl.deleteProject(controller, (ProjectId) request);
                    default:
                        throw new AssertionError("Can't get here.");
                }
            }

            public final com.google.protobuf.Message
            getRequestPrototype(
                    com.google.protobuf.Descriptors.MethodDescriptor method) {
                if (method.getService() != getDescriptor()) {
                    throw new IllegalArgumentException(
                            "Service.getRequestPrototype() given method " +
                                    "descriptor for wrong service type.");
                }
                switch (method.getIndex()) {
                    case 0:
                        return ProjectId.getDefaultInstance();
                    case 1:
                        return ProjectInfo.getDefaultInstance();
                    case 2:
                        return ProjectInfo.getDefaultInstance();
                    case 3:
                        return ProjectId.getDefaultInstance();
                    default:
                        throw new AssertionError("Can't get here.");
                }
            }

            public final com.google.protobuf.Message
            getResponsePrototype(
                    com.google.protobuf.Descriptors.MethodDescriptor method) {
                if (method.getService() != getDescriptor()) {
                    throw new IllegalArgumentException(
                            "Service.getResponsePrototype() given method " +
                                    "descriptor for wrong service type.");
                }
                switch (method.getIndex()) {
                    case 0:
                        return ProjectInfo.getDefaultInstance();
                    case 1:
                        return Success.getDefaultInstance();
                    case 2:
                        return Success.getDefaultInstance();
                    case 3:
                        return Success.getDefaultInstance();
                    default:
                        throw new AssertionError("Can't get here.");
                }
            }

        };
    }

    public static final com.google.protobuf.Descriptors.ServiceDescriptor
    getDescriptor() {
        return ProjectInfoOuterClass.getDescriptor().getServices().get(0);
    }

    public static Stub newStub(
            com.google.protobuf.RpcChannel channel) {
        return new Stub(channel);
    }

    public static BlockingInterface newBlockingStub(
            com.google.protobuf.BlockingRpcChannel channel) {
        return new BlockingStub(channel);
    }

    /**
     * <code>rpc getProjectById(.com.bht.pim.proto.projects.ProjectId) returns (.com.bht.pim.proto.projects.ProjectInfo);</code>
     */
    public abstract void getProjectById(
            com.google.protobuf.RpcController controller,
            ProjectId request,
            com.google.protobuf.RpcCallback<ProjectInfo> done);

    /**
     * <code>rpc addNewProject(.com.bht.pim.proto.projects.ProjectInfo) returns (.com.bht.pim.proto.projects.Success);</code>
     */
    public abstract void addNewProject(
            com.google.protobuf.RpcController controller,
            ProjectInfo request,
            com.google.protobuf.RpcCallback<Success> done);

    /**
     * <code>rpc editProject(.com.bht.pim.proto.projects.ProjectInfo) returns (.com.bht.pim.proto.projects.Success);</code>
     */
    public abstract void editProject(
            com.google.protobuf.RpcController controller,
            ProjectInfo request,
            com.google.protobuf.RpcCallback<Success> done);

    /**
     * <code>rpc deleteProject(.com.bht.pim.proto.projects.ProjectId) returns (.com.bht.pim.proto.projects.Success);</code>
     */
    public abstract void deleteProject(
            com.google.protobuf.RpcController controller,
            ProjectId request,
            com.google.protobuf.RpcCallback<Success> done);

    public final com.google.protobuf.Descriptors.ServiceDescriptor
    getDescriptorForType() {
        return getDescriptor();
    }

    public final void callMethod(
            com.google.protobuf.Descriptors.MethodDescriptor method,
            com.google.protobuf.RpcController controller,
            com.google.protobuf.Message request,
            com.google.protobuf.RpcCallback<
                    com.google.protobuf.Message> done) {
        if (method.getService() != getDescriptor()) {
            throw new IllegalArgumentException(
                    "Service.callMethod() given method descriptor for wrong " +
                            "service type.");
        }
        switch (method.getIndex()) {
            case 0:
                this.getProjectById(controller, (ProjectId) request,
                        com.google.protobuf.RpcUtil.<ProjectInfo>specializeCallback(
                                done));
                return;
            case 1:
                this.addNewProject(controller, (ProjectInfo) request,
                        com.google.protobuf.RpcUtil.<Success>specializeCallback(
                                done));
                return;
            case 2:
                this.editProject(controller, (ProjectInfo) request,
                        com.google.protobuf.RpcUtil.<Success>specializeCallback(
                                done));
                return;
            case 3:
                this.deleteProject(controller, (ProjectId) request,
                        com.google.protobuf.RpcUtil.<Success>specializeCallback(
                                done));
                return;
            default:
                throw new AssertionError("Can't get here.");
        }
    }

    public final com.google.protobuf.Message
    getRequestPrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
            throw new IllegalArgumentException(
                    "Service.getRequestPrototype() given method " +
                            "descriptor for wrong service type.");
        }
        switch (method.getIndex()) {
            case 0:
                return ProjectId.getDefaultInstance();
            case 1:
                return ProjectInfo.getDefaultInstance();
            case 2:
                return ProjectInfo.getDefaultInstance();
            case 3:
                return ProjectId.getDefaultInstance();
            default:
                throw new AssertionError("Can't get here.");
        }
    }

    public final com.google.protobuf.Message
    getResponsePrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
            throw new IllegalArgumentException(
                    "Service.getResponsePrototype() given method " +
                            "descriptor for wrong service type.");
        }
        switch (method.getIndex()) {
            case 0:
                return ProjectInfo.getDefaultInstance();
            case 1:
                return Success.getDefaultInstance();
            case 2:
                return Success.getDefaultInstance();
            case 3:
                return Success.getDefaultInstance();
            default:
                throw new AssertionError("Can't get here.");
        }
    }

    public interface Interface {
        /**
         * <code>rpc getProjectById(.com.bht.pim.proto.projects.ProjectId) returns (.com.bht.pim.proto.projects.ProjectInfo);</code>
         */
        public abstract void getProjectById(
                com.google.protobuf.RpcController controller,
                ProjectId request,
                com.google.protobuf.RpcCallback<ProjectInfo> done);

        /**
         * <code>rpc addNewProject(.com.bht.pim.proto.projects.ProjectInfo) returns (.com.bht.pim.proto.projects.Success);</code>
         */
        public abstract void addNewProject(
                com.google.protobuf.RpcController controller,
                ProjectInfo request,
                com.google.protobuf.RpcCallback<Success> done);

        /**
         * <code>rpc editProject(.com.bht.pim.proto.projects.ProjectInfo) returns (.com.bht.pim.proto.projects.Success);</code>
         */
        public abstract void editProject(
                com.google.protobuf.RpcController controller,
                ProjectInfo request,
                com.google.protobuf.RpcCallback<Success> done);

        /**
         * <code>rpc deleteProject(.com.bht.pim.proto.projects.ProjectId) returns (.com.bht.pim.proto.projects.Success);</code>
         */
        public abstract void deleteProject(
                com.google.protobuf.RpcController controller,
                ProjectId request,
                com.google.protobuf.RpcCallback<Success> done);

    }

    public interface BlockingInterface {
        public ProjectInfo getProjectById(
                com.google.protobuf.RpcController controller,
                ProjectId request)
                throws com.google.protobuf.ServiceException;

        public Success addNewProject(
                com.google.protobuf.RpcController controller,
                ProjectInfo request)
                throws com.google.protobuf.ServiceException;

        public Success editProject(
                com.google.protobuf.RpcController controller,
                ProjectInfo request)
                throws com.google.protobuf.ServiceException;

        public Success deleteProject(
                com.google.protobuf.RpcController controller,
                ProjectId request)
                throws com.google.protobuf.ServiceException;
    }

    public static final class Stub extends ProjectService implements Interface {
        private final com.google.protobuf.RpcChannel channel;

        private Stub(com.google.protobuf.RpcChannel channel) {
            this.channel = channel;
        }

        public com.google.protobuf.RpcChannel getChannel() {
            return channel;
        }

        public void getProjectById(
                com.google.protobuf.RpcController controller,
                ProjectId request,
                com.google.protobuf.RpcCallback<ProjectInfo> done) {
            channel.callMethod(
                    getDescriptor().getMethods().get(0),
                    controller,
                    request,
                    ProjectInfo.getDefaultInstance(),
                    com.google.protobuf.RpcUtil.generalizeCallback(
                            done,
                            ProjectInfo.class,
                            ProjectInfo.getDefaultInstance()));
        }

        public void addNewProject(
                com.google.protobuf.RpcController controller,
                ProjectInfo request,
                com.google.protobuf.RpcCallback<Success> done) {
            channel.callMethod(
                    getDescriptor().getMethods().get(1),
                    controller,
                    request,
                    Success.getDefaultInstance(),
                    com.google.protobuf.RpcUtil.generalizeCallback(
                            done,
                            Success.class,
                            Success.getDefaultInstance()));
        }

        public void editProject(
                com.google.protobuf.RpcController controller,
                ProjectInfo request,
                com.google.protobuf.RpcCallback<Success> done) {
            channel.callMethod(
                    getDescriptor().getMethods().get(2),
                    controller,
                    request,
                    Success.getDefaultInstance(),
                    com.google.protobuf.RpcUtil.generalizeCallback(
                            done,
                            Success.class,
                            Success.getDefaultInstance()));
        }

        public void deleteProject(
                com.google.protobuf.RpcController controller,
                ProjectId request,
                com.google.protobuf.RpcCallback<Success> done) {
            channel.callMethod(
                    getDescriptor().getMethods().get(3),
                    controller,
                    request,
                    Success.getDefaultInstance(),
                    com.google.protobuf.RpcUtil.generalizeCallback(
                            done,
                            Success.class,
                            Success.getDefaultInstance()));
        }
    }

    private static final class BlockingStub implements BlockingInterface {
        private final com.google.protobuf.BlockingRpcChannel channel;

        private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
            this.channel = channel;
        }

        public ProjectInfo getProjectById(
                com.google.protobuf.RpcController controller,
                ProjectId request)
                throws com.google.protobuf.ServiceException {
            return (ProjectInfo) channel.callBlockingMethod(
                    getDescriptor().getMethods().get(0),
                    controller,
                    request,
                    ProjectInfo.getDefaultInstance());
        }


        public Success addNewProject(
                com.google.protobuf.RpcController controller,
                ProjectInfo request)
                throws com.google.protobuf.ServiceException {
            return (Success) channel.callBlockingMethod(
                    getDescriptor().getMethods().get(1),
                    controller,
                    request,
                    Success.getDefaultInstance());
        }


        public Success editProject(
                com.google.protobuf.RpcController controller,
                ProjectInfo request)
                throws com.google.protobuf.ServiceException {
            return (Success) channel.callBlockingMethod(
                    getDescriptor().getMethods().get(2),
                    controller,
                    request,
                    Success.getDefaultInstance());
        }


        public Success deleteProject(
                com.google.protobuf.RpcController controller,
                ProjectId request)
                throws com.google.protobuf.ServiceException {
            return (Success) channel.callBlockingMethod(
                    getDescriptor().getMethods().get(3),
                    controller,
                    request,
                    Success.getDefaultInstance());
        }

    }

    // @@protoc_insertion_point(class_scope:com.bht.pim.proto.projects.ProjectService)
}

